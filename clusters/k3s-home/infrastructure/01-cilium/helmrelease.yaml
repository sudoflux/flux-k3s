apiVersion: helm.toolkit.fluxcd.io/v2 # Using v2, adjust if your Flux is older (v2beta2 is also common)
kind: HelmRelease
metadata:
  name: cilium
  namespace: kube-system
spec:
  # Consider increasing intervals for production (e.g., 5m or 15m)
  interval: 5m # How often Flux reconciles this HelmRelease

  chart:
    spec:
      chart: cilium
      version: "1.17.3" # Or your desired version
      sourceRef:
        kind: HelmRepository
        name: cilium
        namespace: flux-system # Or where your HelmRepository is defined
      # Consider increasing interval for production
      interval: 15m # How often Flux checks for new chart versions/updates source
      # Use default strategy unless you specifically need 'Latest' (forces upgrade even if chart hasn't changed)
      reconcileStrategy: ChartVersion

  install:
    remediation:
      retries: 5 # Retries on installation failure
    crds: CreateReplace # Install or replace CRDs on initial install

  upgrade:
    # Remove 'force: true' unless absolutely necessary, can be disruptive
    # force: true
    remediation:
      retries: 5 # Retries on upgrade failure
      remediateLastFailure: true # Attempt to fix the last failure on next run
    crds: CreateReplace # Install or replace CRDs on upgrade too

  # IMPORTANT: Define the final desired state values here
  values:
    # == Base K3s/CNI settings ==
    k8sServiceHost: "192.168.10.30" # Ensure this is the correct reachable IP/VIP for your master(s)
    k8sServicePort: 6443
    cni:
      install: true
      exclusive: true # Make Cilium the only CNI
      binPath: /var/lib/rancher/k3s/data/current/bin # K3s specific path
      confPath: /var/lib/rancher/k3s/agent/etc/cni/net.d # K3s specific path
    operator:
      replicas: 1 # Recommended for stability

    # == Kube-Proxy Replacement ==
    kubeProxyReplacement: true # Use Cilium eBPF kube-proxy replacement

    # == BGP Control Plane ==
    bgpControlPlane:
      enabled: true # Enable Cilium's BGP components
      # NOTE: You MUST create CiliumBGPPeeringPolicy resources separately
      #       to define your ASN and peers.

    # == Load Balancing Features ==
    loadBalancer:
      # Mode for handling LoadBalancer services. 'dsr' or 'snat'
      mode: dsr
    l2announcements:
      enabled: true # Announce LB IPs via ARP/NDP on the local L2 network
      # Optional: configure lease settings if defaults aren't suitable
      # leaseDuration: 15s
      # leaseRenewDeadline: 10s
      # leaseRetryPeriod: 2s
    serviceExternalIPs:
      enabled: true # Allow assigning externalIPs to Services

    # == Ingress Controller ==
    ingressController:
      enabled: true # Deploy Cilium's Ingress Controller
      loadbalancerMode: dedicated # Use a dedicated LB service for Ingress (vs 'shared')
      service:
        type: LoadBalancer # Expose Ingress via a Kubernetes LoadBalancer Service

    # == Hubble Observability (Optional but Recommended) ==
    hubble:
      enabled: true
      relay:
        enabled: true # Deploy Hubble Relay
      ui:
        enabled: true # Deploy Hubble UI
      metrics:
        enabled: # Use YAML array for metrics
          - dns:query;ignoreAAAA
          - drop
          - tcp
          - flow
          - port-distribution
          - icmp
          - httpV2:exemplars=true;labelsContext=source_ip,source_namespace,source_app,destination_ip,destination_namespace,destination_app,traffic_direction
        # Add other metrics configs as needed